{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"STINGAR Installation Instructions STINGAR helps protect networks from malicious attacks by providing administrators with an easy way to deploy/manage honeypots & share attack data with the STINGAR community. See the STINGAR website for more information. You must be a member of the STINGAR community to use STINGAR. To request membership, send email to the STINGAR team: team-stingar@duke.edu . The team will give you an account to retrieve the STINGAR code from a Docker registry. You'll need a username/password for this registry to install STINGAR. Each member of the STINGAR community hosts their own instance of the STINGAR application. This app helps install/manage honeypots, collects attack info and can be configured to deliver attack data to the STINGAR central repository where it's aggregated, summarized and made available to the community. The documentation on this site describes how you can install & configure an instance of the STINGAR application and deploy a honeypot. The process involves downloading installation tools (Docker, docker-compose & python) and running a script to retrieve & configure STINGAR.","title":"Installation Guide"},{"location":"index.html#stingar-installation-instructions","text":"STINGAR helps protect networks from malicious attacks by providing administrators with an easy way to deploy/manage honeypots & share attack data with the STINGAR community. See the STINGAR website for more information. You must be a member of the STINGAR community to use STINGAR. To request membership, send email to the STINGAR team: team-stingar@duke.edu . The team will give you an account to retrieve the STINGAR code from a Docker registry. You'll need a username/password for this registry to install STINGAR. Each member of the STINGAR community hosts their own instance of the STINGAR application. This app helps install/manage honeypots, collects attack info and can be configured to deliver attack data to the STINGAR central repository where it's aggregated, summarized and made available to the community. The documentation on this site describes how you can install & configure an instance of the STINGAR application and deploy a honeypot. The process involves downloading installation tools (Docker, docker-compose & python) and running a script to retrieve & configure STINGAR.","title":"STINGAR Installation Instructions"},{"location":"arch.html","text":"Data Flow Architecture","title":"Arch"},{"location":"basic_commands.html","text":"Basic Docker & Docker Compose Commands Please refer to Docker documentation for comprehensive information about Docker & docker-compose. . Start STINGAR docker-compose up -d Verify STINGAR Containers Are Up & Running docker-compose ps Stop STINGAR docker-compose stop Monitor STINGAR Logs docker-compose logs -f Simulate Honeypot Events (for Testing) ssh localhost -p 22 ssh localhost -p 23","title":"Basic commands"},{"location":"basic_commands.html#basic-docker-docker-compose-commands","text":"Please refer to Docker documentation for comprehensive information about Docker & docker-compose. .","title":"Basic Docker &amp; Docker Compose Commands"},{"location":"basic_commands.html#start-stingar","text":"docker-compose up -d","title":"Start STINGAR"},{"location":"basic_commands.html#verify-stingar-containers-are-up-running","text":"docker-compose ps","title":"Verify STINGAR Containers Are Up &amp; Running"},{"location":"basic_commands.html#stop-stingar","text":"docker-compose stop","title":"Stop STINGAR"},{"location":"basic_commands.html#monitor-stingar-logs","text":"docker-compose logs -f","title":"Monitor STINGAR Logs"},{"location":"basic_commands.html#simulate-honeypot-events-for-testing","text":"ssh localhost -p 22 ssh localhost -p 23","title":"Simulate Honeypot Events (for Testing)"},{"location":"config_files.html","text":"Configuration Files The STINGAR QuickStart script prompts for some configurable values and uses this information to creates 3 files that STINGAR depends upon. The three files are: stingar.env - Defines all environment variables used by all STINGAR components. This file contains values that define the API Key, port numbers, server names, passwords, the color scheme, etc. docker-compose.yml - Defines the STINGAR Docker containers and configures these services. This file coordinates the services in an isolated environment. nginx.conf - Nginx is a web service that controls access to STINGAR features by proxying URL requests to the appropriate service. The content of these files shouldn't be altered unless you understand the impact of the change. One small change can cause STINGAR to fail and it might be difficult to debug. Therefore, we discourage changing values in these files with the following 2 exceptions: 1. Customize the STINGAR UI Appearance You may customize the appearance of your STINGAR UI by changing the color theme (dark & light values) and the default number of rows that appear in the list of honeypot events. (These are defined at the bottom of the stingar.env file): Env Var Name Value Description THEME_DARK_BASE_COLOR 363636 You may customize your STINGAR UI appearance by specifying the dark color. THEME_LIGHT_BASE_COLOR white You may customize your STINGAR UI appearance by specifying the light color. DEFAULT_ROWS_PER_PAGE 1000 Defines the default number of rows that will appear on the attach analysis page. INSTITUTION_NAME XYZ University The name of your organization. This will appear in the heading on each page of the UI. 2. Implement LDAP Authentication If your organization uses LDAP, you may configure STINGAR to authenticate users via your LDAP instance. To use LDAP, set LDAP_ENABLED to true and use the other LDAP variables to provide STINGAR with the info required to access it (host, port, base). Once enabled, an [LDAP Login] button will appear on the STINGAR login page. Users may then choose to login with the username/password they use to access other systems within your organization. STINGAR users still need a user record in STINGAR; then the person can use their organization login/password to access STINGAR. | Env Var Name Value Description LDAP_ENABLED false Set to true to enable LDAP authentication; then provide connection info in the LDAP host/port/base variables. LDAP_HOST The hostname of your organization's LDAP instance. LDAP_PORT integer The port number to access your organization's LDAP instance. LDAP_BASE You will need to stop and restart STINGAR to see the results of changes to these values. stingar.env - Lists Environment Variables This file is divided into the following sections. Fluentd ENV variables Fluentd is a data collector that transfers attack event information to your elasticsearch repository and optionally the STINGAR CIF where it is aggregated with data from other organizations and made available to the STINGAR community. Fluentd needs to be configured to let STINGAR know where to pickup & deliver honeypot event transactions. Env Var Name Value Description FLUENTD_HOST fluentd The name of the host upon which the honeypots reside. FLUENTD_PORT 24224 The port number used to access honeypots. FLUENTD_REMOTE_HOST localhost FLUENTD_LOCAL_PORT 24225 FLUENTD_KEY random-string Secret key provided with each transaction to prove a request is authorized FLUENTD_APP stingar Fluent Bit ENV variables Env Var Name Value Description FLUENTBIT_HOST fluentbit FLUENTBIT_PORT 24284 Content Cell FLUENTBIT_APP stingar FLUENTD_HOSTNAME flb.local CIF ENV variables Env Var Name Value Description CIF_ENABLED false Set to true if honeypot events are to be sent to the common STINGAR CIF. CIF_HOST Name of the server that hosts the common STINGAR CIF. CIF_TOKEN Key that you must use to communicate with the STINGAR CIF. CIF_PROVIDER CIF_DEFAULT yellow CIF_CONFIDENCE 9 CIF_TAGS honeypots CIF_GROUP everyone Docker repository settings This identifies the address where the latest STINGAR code can be retrieved. Env Var Name Value Description DOCKER_REPOSITORY stingarregistry.azurecr.io The address of the repository from which you can download the STINGAR application. DOCKER_USERNAME {your STINGAR repo username} Your STINGAR Registry username DOCKER_PASSWORD {your encrpted password} Your STINGAR Registry password (encrypted) Env Var Name Value Description API_HOST http://stingarapi:8000/ The address used by STINGAR to call the API API_KEY {string of random chars} Auto-generated by QuickStart to provide you with access to your STINGAR API PASSPHRASE {string of random chars} Auto-generated by QuickStart to provide you with access to your STINGAR API SALT {string of random chars} Auto-generated by QuickStart to provide you with access to your STINGAR API STINGAR_SERVICE_URL http://stingarapi:8000/api/v2 The URL that provides access to the STINGAR API. UI_HOSTNAME stingar.domain.edu The server name that hosts the STINGAR UI.","title":"About the Configuration Files"},{"location":"prereqs.html","text":"Minimum Requirements Hardware STINGAR requires at least two servers: one hosts the STINGAR application, and one or more host the honeypots. 1. Server to Deploy/Manage Honeypots One server hosts the STINGAR application which coordinates all STINGAR client activity & serves as your local system console. This server must have at least: 2 CPUs, 2 GB RAM, 20 GB Disk Linux or MacOS operating system (ubuntu is recommended) internet connectivity STINGAR is installed on this 'admin server'; the installation process will prompt you for the domain name/ip address. 2. Server to Host Honeypot(s) One or more servers must be available to host your honeypots. You may deploy honeypots to any number of servers. Each one should have at least: 1 CPU, 512 MB RAM, 8 GB Disk internet connectivity an alternate ssh port (for Cowrie deployments) STINGAR Administrator You need a user account with root access on each STINGAR server. The name can be any valid linux/MacOS username. You must be logged in as this user when you install STINGAR. The person who installs STINGAR must have basic understanding of Docker and system administration. For comprehensive information about Docker, you may refer to Docker & docker-compose documentation.","title":"Prereqs"},{"location":"attack_analysis/api.html","text":"STINGAR API The STINGAR API is available through Swagger which describes each API query. The STINGAR Swagger page is available by entering your host server url with the prefix /api/v2#/ You must provide your API_KEY to use the STINGAR API. This key was created when you ran the QuickStart script and is stored in the stingar.env file in STINGAR's root directory. Grab that key from the stingar.env file (It looks something like this: API_KEY=Rp9U4erhgej5V2QfCpxSrA). To use Swagger, press the [Authorize] button in the upper right side of the Swagger page and enter the key at the prompt. Alternatively, you can retrieve the API key from the UI's User Management feature by logging in as 'admin' user and selecting 'View Your API Token' from the [Actions] dropdown on the User Management page. You can also retrieve the token by querying the stingar database. docker-compose exec stingarapi sqlite3 /srv/db/stingar.db \"SELECT token FROM users WHERE username='admin'\"","title":"Via STINGAR API"},{"location":"attack_analysis/api.html#stingar-api","text":"The STINGAR API is available through Swagger which describes each API query. The STINGAR Swagger page is available by entering your host server url with the prefix /api/v2#/ You must provide your API_KEY to use the STINGAR API. This key was created when you ran the QuickStart script and is stored in the stingar.env file in STINGAR's root directory. Grab that key from the stingar.env file (It looks something like this: API_KEY=Rp9U4erhgej5V2QfCpxSrA). To use Swagger, press the [Authorize] button in the upper right side of the Swagger page and enter the key at the prompt. Alternatively, you can retrieve the API key from the UI's User Management feature by logging in as 'admin' user and selecting 'View Your API Token' from the [Actions] dropdown on the User Management page. You can also retrieve the token by querying the stingar database. docker-compose exec stingarapi sqlite3 /srv/db/stingar.db \"SELECT token FROM users WHERE username='admin'\"","title":"STINGAR API"},{"location":"attack_analysis/es.html","text":"Attack Analysis Honeypot attack information is stored in an elasticsearch repository on your local server. To access the data, you will need to provide the API_KEY that was created for your STINGAR instance when you ran the QuickStart script. This key can be found in the stingar.env file in the STINGAR root directory. You may access and analyze data in the elasticsearch repository a number of ways: Elasticsearch Direct Access You may query the elasticsearch repository directly using 'curl' or by entering the query command into a browser. You need to specify your STINGAR server name and provide your API key on the command line. An example elasticsearch query: curl -XGET ' {your STINGAR hostname} :9200/stingar\\-\\*/\\_search?pretty' -H 'api-key: {your key}'","title":"Via Elasticsearch"},{"location":"attack_analysis/es.html#attack-analysis","text":"Honeypot attack information is stored in an elasticsearch repository on your local server. To access the data, you will need to provide the API_KEY that was created for your STINGAR instance when you ran the QuickStart script. This key can be found in the stingar.env file in the STINGAR root directory. You may access and analyze data in the elasticsearch repository a number of ways:","title":"Attack Analysis"},{"location":"attack_analysis/kibana.html","text":"Attack Analysis Kibana Kibana is a powerful tool that lets you analyze elasticsearch data and use resulting datasets to generate visualizations. To access STINGAR's implementation of Kibana, use the following URL in any browser: {your hostname}/kibana","title":"Via Kibana"},{"location":"attack_analysis/kibana.html#attack-analysis","text":"","title":"Attack Analysis"},{"location":"attack_analysis/ui.html","text":"Attack Analysis- User Interface The STINGAR user interface includes a page that lists all honeypot attack events and allows you to select and inspect each one. You may filter the list of events using a number of search criteria.","title":"Via STINGAR User Interface"},{"location":"attack_analysis/ui.html#attack-analysis-user-interface","text":"The STINGAR user interface includes a page that lists all honeypot attack events and allows you to select and inspect each one. You may filter the list of events using a number of search criteria.","title":"Attack Analysis- User Interface"},{"location":"deploy_hp/gen_sample_attacks.html","text":"Deploy a Honeypot Generate Sample Honeypot Attacks Once you've deployed a honeypot, you can generate sample attacks to verify it's working. From the command line on your local laptop/machine, enter the following command to simulate an attack on your new honeypot. ssh username@sample.domain.institution.edu Then go to the STINGAR Attack Analysis page and confirm that your 'attacks' appear in the list of attack events.","title":"Generate Sample Attack Data"},{"location":"deploy_hp/gen_sample_attacks.html#deploy-a-honeypot","text":"","title":"Deploy a Honeypot"},{"location":"deploy_hp/launch.html","text":"Deploy a Honeypot Once you've setup a server to host a honeypot (see instructions here if you haven't yet setup a host), you can now deploy a honeypot. Click [Deploy Honeypot] on the sidebar to open the 'Honeypot Deployment' page as shown below: Select Honeypot Type Currently, 5 types of honeypots are available to deploy via STINGAR: Amum, Conpot, Cowrie, Dionaea & Glastopf. On this 'Deploy Honeypot' page, a card appears for each one that briefly describes the honeypot and displays the number of instances you currently have running. Click the button for the honeypot you want to deploy. In this example, we are deploying a Cowrie honeypot, so when we click on [Deploy a Cowrie Honeypot] , the following screen should appear: Select Host In the left pane select the server that will host this honeypot. (If only one host has been created in STINGAR, it will be selected by default.) Information about that host will display below the host dropdown entry. Configure Honeypot The right pane displays the configurable settings for the given honeypot type. The settings are pre-populated with default values which can be changed. Configuration options are unique to each type of honeypot. Deploy Honeypot Once you have identified the host & are satisfied with the configuration settings, press [Deploy Honeypot] in the lower left to initiate the deployment process. Once deployed, a page summarizing this deployment event will appear that includes a log that keeps a running update on the progress of the deployment, logging each step taken. If an error is encountered and the honeypot fails to deploy, the cause of the problem will be reported under the 'errors' section of the deployment log table. The honeypot has been successfully deployed when the status icon turns green and the word 'success' appears next to it.","title":"Launch STINGAR Deployment"},{"location":"deploy_hp/launch.html#deploy-a-honeypot","text":"Once you've setup a server to host a honeypot (see instructions here if you haven't yet setup a host), you can now deploy a honeypot. Click [Deploy Honeypot] on the sidebar to open the 'Honeypot Deployment' page as shown below:","title":"Deploy a Honeypot"},{"location":"install/launch.html","text":"Launch STINGAR With STINGAR downloaded & configured (assuming you're logged on to the server as the STINGAR user in the 'stingar' directory where it resides) enter: docker-compose up -d It can take up to 15 minutes to startup the first time. Monitor progress with this command: docker-compose logs -f stingarui STINGAR is ready when the log output stops scrolling & you see: stingarui_1 | * Environment: production stingarui_1 | * Listening on tcp://0.0.0.0:3000 stingarui_1 | Use Ctrl-C to stop Access STINGAR From a Browser You may access STINGAR by entering the URL or domain name of your host machine into a browser. You must prefix your STINGAR hostname with https:// In the initial browser view, you'll likely see a message about a potential security risk that recommends you 'Go Back'. Assuming you installed certs and self-signed your application, it's safe to proceed & press the [Advanced...] button. An example of the warning in Firefox: STINGAR Admin User STINGAR provides an 'admin' user which lets you login to the application. (This is not the same as the linux user you used to logon to the server.) The first time you login, you'll need to set the password: Once the password is set, the STINGAR UI dashboard appears. Congrats! You have successfully installed STINGAR. Deploy a Honeypot Proceed to the next step to deploy a honeypot. You need another ubuntu server to host a honeypot. Ubuntu is currently the only operating system STINGAR supports for hosting honeypots. You cannot install honeypots on the same server used to host STINGAR.","title":"Launch STINGAR"},{"location":"install/run_quickstart.html","text":"Download & Install STINGAR Application Before you start, enter information about your STINGAR server in the box below. STINGAR_HOSTNAME: Do not include the https prefix. {{{user-defined-values}}} Then follow the instructions below... You need to be logged onto your STINGAR server: STINGAR_HOSTNAME as STINGAR_ADMIN_USER . ssh STINGAR_ADMIN_USER@STINGAR_HOSTNAME While logged onto this server as STINGAR_ADMIN_USER, follow the instructions below to step through the process to download STINGAR & run a script to install & configure it. Download QuickStart Script The STINGAR QuickStart script is available in Duke's public gitlab repository. The script will prompt you for configuration specs and will then do all the work to download, install & configure your implementation of STINGAR. When done, you will be able to enter your STINGAR server hostname in a browser ( https://STINGAR_HOSTNAME ) to access your running implementation of STINGAR. Run the following command to download the script: git clone https://gitlab.oit.duke.edu/stingar2-public/stingar-quickstart stingar cd stingar The command above creates a directory named 'stingar' in the root directory of STINGAR_ADMIN_USER & pulls down all files needed to install STINGAR, saving them to this new 'stingar' directory. Install Basic SSL To implement simple SSL certification for STINGAR, you may choose to create public/private keys for STINGAR using the following commands: First, from within the stingar directory, create a 'certs' directory in which the keys will be stored. mkdir certs Next create the keys using the following command. openssl req -subj /CN=STINGAR_HOSTNAME -x509 -newkey rsa:4096 -nodes -keyout certs/key.pem -out certs/cert.pem -days 365 Verify that the two expected files were created in the certs directory: ls certs You should find these 2 files in that directory: cert.pem key.pem Run the QuickStart Script At this point you should have docker, docker-compose & python3 installed on this server and the QuickStart script (file: configure_stingar.py) downloaded to the current directory. You will need the password provided by the STINGAR team to retrieve STINGAR from the registry where the code resides. Contact the STINGAR team ( team-stingar@duke.edu ) if you don't have a STINGAR Registry account or do not know your username/password for it. Now it's just a matter of running the script and responding to the prompts: python3 configure_stingar.py .quickStartOutput { color: gray; font-style: italic; } .userInput { color: blue; font-style: underline; font-size: small; margin-left: 1em; } A sample script session is shown below (Input values for a default configuration appear in blue .) Checking if docker is installed... Checking if docker-compose is installed... Enter the URL where your STINGAR web app will be available. The domain must be resolvable. E.g.: sub.domain.tld or localhost/stingar. Domain: STINGAR_HOSTNAME Please enter your SSL certificate path. [./certs]: [Return] Do you wish to specify an alternate Docker registry? (y/n): [y] [Return] Please enter the URL for the Docker registry: [stingarregistry.azurecr.io] [Return] Please enter your Docker registry username: STINGAR_REGISTRY_USER Please enter your Docker registry password: Enter the registry password that was provided to you by the STINGAR team (Note: The password will not display.) Testing registry authentication... WARNING! Using --password via the CLI is insecure. Use --password-stdin. Login Succeeded Authentication to stingarregistry.azurecr.io succeeded. Do you wish to enable logging to a remote CIFv3 server? (y/n): [n] [Return] If you don't know what a CIF server is, or don't have one available, answer n or hit enter. If you have a CIF server you wish indicators (IP, hash, url) from your honeypots to be submitted to (such as the STINGAR project, answer y to this question. If you answer y to this last question, you will be presented with three follow-up questions: Configuring for Collective Intelligence Framework (CIF) Please enter the URL for the remote CIFv3 server: Please enter the API token for the remote CIFv3 server: This token must have write privileges to the remote CIF instance. Please enter a name you wish to be associated with your organization: For more information about CIFv3 and its configuration, please refer to our [CIF documentation](https://csirtgadgets.com/collective-intelligence-framework/). QuickStart Script Results Upon completion, the script should report that it has created three files: stingar.env nginx.conf docker-compose.yml These files define the way your instance of STINGAR appears & functions. They may be modified to add or change the behavior and appearance of your implementation of STINGAR. More detailed information about these files is available here .","title":"Run Installation Script"},{"location":"install/run_quickstart.html#download-install-stingar-application","text":"","title":"Download &amp; Install STINGAR Application"},{"location":"install/run_quickstart.html#before-you-start-enter-information-about-your-stingar-server-in-the-box-below","text":"STINGAR_HOSTNAME: Do not include the https prefix. {{{user-defined-values}}}","title":"Before you start, enter information about your STINGAR server in the box below."},{"location":"install/run_quickstart.html#then-follow-the-instructions-below","text":"You need to be logged onto your STINGAR server: STINGAR_HOSTNAME as STINGAR_ADMIN_USER . ssh STINGAR_ADMIN_USER@STINGAR_HOSTNAME While logged onto this server as STINGAR_ADMIN_USER, follow the instructions below to step through the process to download STINGAR & run a script to install & configure it.","title":"Then follow the instructions below..."},{"location":"install/run_quickstart.html#download-quickstart-script","text":"The STINGAR QuickStart script is available in Duke's public gitlab repository. The script will prompt you for configuration specs and will then do all the work to download, install & configure your implementation of STINGAR. When done, you will be able to enter your STINGAR server hostname in a browser ( https://STINGAR_HOSTNAME ) to access your running implementation of STINGAR. Run the following command to download the script: git clone https://gitlab.oit.duke.edu/stingar2-public/stingar-quickstart stingar cd stingar The command above creates a directory named 'stingar' in the root directory of STINGAR_ADMIN_USER & pulls down all files needed to install STINGAR, saving them to this new 'stingar' directory.","title":"Download QuickStart Script"},{"location":"install/run_quickstart.html#install-basic-ssl","text":"To implement simple SSL certification for STINGAR, you may choose to create public/private keys for STINGAR using the following commands: First, from within the stingar directory, create a 'certs' directory in which the keys will be stored. mkdir certs Next create the keys using the following command. openssl req -subj /CN=STINGAR_HOSTNAME -x509 -newkey rsa:4096 -nodes -keyout certs/key.pem -out certs/cert.pem -days 365 Verify that the two expected files were created in the certs directory: ls certs You should find these 2 files in that directory: cert.pem key.pem","title":"Install Basic SSL"},{"location":"install/run_quickstart.html#run-the-quickstart-script","text":"At this point you should have docker, docker-compose & python3 installed on this server and the QuickStart script (file: configure_stingar.py) downloaded to the current directory. You will need the password provided by the STINGAR team to retrieve STINGAR from the registry where the code resides. Contact the STINGAR team ( team-stingar@duke.edu ) if you don't have a STINGAR Registry account or do not know your username/password for it. Now it's just a matter of running the script and responding to the prompts: python3 configure_stingar.py .quickStartOutput { color: gray; font-style: italic; } .userInput { color: blue; font-style: underline; font-size: small; margin-left: 1em; } A sample script session is shown below (Input values for a default configuration appear in blue .) Checking if docker is installed... Checking if docker-compose is installed... Enter the URL where your STINGAR web app will be available. The domain must be resolvable. E.g.: sub.domain.tld or localhost/stingar. Domain: STINGAR_HOSTNAME Please enter your SSL certificate path. [./certs]: [Return] Do you wish to specify an alternate Docker registry? (y/n): [y] [Return] Please enter the URL for the Docker registry: [stingarregistry.azurecr.io] [Return] Please enter your Docker registry username: STINGAR_REGISTRY_USER Please enter your Docker registry password: Enter the registry password that was provided to you by the STINGAR team (Note: The password will not display.) Testing registry authentication... WARNING! Using --password via the CLI is insecure. Use --password-stdin. Login Succeeded Authentication to stingarregistry.azurecr.io succeeded. Do you wish to enable logging to a remote CIFv3 server? (y/n): [n] [Return] If you don't know what a CIF server is, or don't have one available, answer n or hit enter. If you have a CIF server you wish indicators (IP, hash, url) from your honeypots to be submitted to (such as the STINGAR project, answer y to this question. If you answer y to this last question, you will be presented with three follow-up questions: Configuring for Collective Intelligence Framework (CIF) Please enter the URL for the remote CIFv3 server: Please enter the API token for the remote CIFv3 server: This token must have write privileges to the remote CIF instance. Please enter a name you wish to be associated with your organization: For more information about CIFv3 and its configuration, please refer to our [CIF documentation](https://csirtgadgets.com/collective-intelligence-framework/).","title":"Run the QuickStart Script"},{"location":"install/run_quickstart.html#quickstart-script-results","text":"Upon completion, the script should report that it has created three files: stingar.env nginx.conf docker-compose.yml","title":"QuickStart Script Results"},{"location":"prepare_hp_host/register_in_stingar.html","text":"Prepare Honeypot Host Machine You must have root access on an ubuntu 20.04 (or later) server to host a honeypot. Currently, honeypots can only be hosted on ubuntu 20.04 or later ; one honeypot per server. You need the following info: The IP address or domain name of the machine that will host the honeypot. The username with root access that is used to access this machine. A non-standard port number for ssh communications. (Something other than 22.) Register your honeypot host machine in STINGAR. 1. Go to 'Manage Hosts' Section in STINGAR Login to your STINGAR app & select [Manage Hosts] in the left sidebar. (If you haven't installed STINGAR yet, see the section: Install STINGAR .) 2. Create Authentication Key Create an authentication key. This key will be copy/pasted to the host machine in the next section. Click anywhere in the 'Manage Authentication Keys' bar at the top of the page. This section will expand to show the [+ Add New Auth Key Pair] . Click this button to create a new key & give it a name that helps you identify this key. img[alt=drawing] { width: 200px; } Press [Submit] & an authentication public/private key pair will be created with the name you provided. The new key will appear in the auth key list. 3. Define your Honeypot Host Press the [ + Add Honeypot Host] button to enter information about your host. The screenshot below shows an example of registering host vcm-15556.vm.duke.edu for username vcm, and assigns the ' default ' auth key to communication on port 2222. When you press [Add New Honeypot Host] , your host will appear in the list of hosts. If all went well, your honeypot host is registered in STINGAR. You now need to logon to the actual honeypot host machine to configure it to communicate with STINGAR. The next section describes the steps required. You'll need the info you just entered into STINGAR, so click on the host to open a page to show the info you need to setup the machine.","title":"Register Machine in STINGAR"},{"location":"prepare_hp_host/register_in_stingar.html#prepare-honeypot-host-machine","text":"","title":"Prepare Honeypot Host Machine"},{"location":"prepare_hp_host/setup_host.html","text":"Prepare Honeypot Host Machine You must do 4 things by hand on your honeypot host machine: Setup password-less sudo. Verify you have ssh setup in your root directory. Add the STINGAR authentication key to ~/.ssh/authorized_keys . Configure the ssh port using the port number you specified in STINGAR. (Something other than 22.) Logon to your host machine as the user you specified in STINGAR. (Use putty on Windows or a terminal session on linux or Mac.) Sample login command: ssh stingar@sample.domain.institution.edu Step 1. Setup password-less sudo. Setup the user so you can run sudo commands without entering a password: sudo visudo This should open a file that contains the line: {username} ALL=(ALL) NOPASSWD:ALL where {username} is a name. Replace the {username} value with the name of your honeypot user. Step 2. Verify you have ssh setup in your root directory. To see if ssh is setup, list the content of your root directory. cd ls -la If .ssh doesn't appear in the list (as it does in the image above) you need to create this directory & add the authorized_keys file with correct permissions by running the following commands. If it's already setup, skip to step 3. mkdir .ssh chmod 700 .ssh touch ~/.ssh/authorized_keys chmod 600 ~/.ssh/authorized_keys Step 3. Add the STINGAR-generated public key to ~/.ssh/authorized_keys. Now that the .ssh/authorized_keys file exists, open it to copy/paste in the authorization key you created in STINGAR earlier. Use the file with an editor of your choice. You can use the vi editor if you're familiar with it. If not, you probably want to use the nano editor. We will assume you're using nano for the next few steps. Open the authorized_keys file: nano ~/.ssh/authorized_keys Back in the browser, on the STINGAR 'Show Host' page... press the [Copy Public Key] button. This quietly saves the key to your clipboard. Return to the .ssh/authorized_keys file & press ctrl-v to paste it into the file. Save the file and quit by entering: ctrl-o [Return] ctrl-x Note: The honeypot host machine must have the same key assigned to it in STINGAR or they will not be able to communicate with each other. Step 4. Setup a non-standard ssh port. Tell your honeypot host the port number to use for ssh communications. (This must be the port number you entered for this host in STINGAR.) Open the /etc/ssh/sshd_config file, uncomment the line: #Port and enter the number you defined for this host in STINGAR. This requires root access, so prefix the command with sudo . sudo nano /etc/ssh/sshd_config The /etc/ssh/sshd_config file: before edit after edit (assuming you've defined ssh port to be 2222) Once updated, restart ssh: sudo systemctl restart ssh Your host machine is now ready to communicate with STINGAR. You may logout of the server (enter 'exit' at the command prompt).","title":"Setup Host Machine"},{"location":"prepare_hp_host/setup_host.html#prepare-honeypot-host-machine","text":"You must do 4 things by hand on your honeypot host machine: Setup password-less sudo. Verify you have ssh setup in your root directory. Add the STINGAR authentication key to ~/.ssh/authorized_keys . Configure the ssh port using the port number you specified in STINGAR. (Something other than 22.) Logon to your host machine as the user you specified in STINGAR. (Use putty on Windows or a terminal session on linux or Mac.) Sample login command: ssh stingar@sample.domain.institution.edu","title":"Prepare Honeypot Host Machine"},{"location":"requirements/confirm.html","text":"Minimum Requirements Confirm Docker Installation Enter the following commands to confirm that Docker & docker-compose are installed. You should get the expected result: docker ps If instead you see something like: /usr/bin/docker-current: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.26/containers/create: dial unix /var/run/docker.sock: connect: permission denied. Then run the command: sudo chmod 666 /var/run/docker.sock Confirm Docker & Docker-Compose Versions docker --version Expected result: Docker version 19.03.6 (or higher) docker-compose --version Expected result: docker-compose version 1.17.1 (or higher) If you see the expected results for these commands, you're ready to proceed to install STINGAR.","title":"Verify Software Installation"},{"location":"requirements/hardware.html","text":"Minimum Requirements Hardware STINGAR requires at least two servers: one hosts the STINGAR application, and one or more host the honeypots. 1. Server to Deploy/Manage Honeypots One server hosts the STINGAR application which coordinates all STINGAR client activity & serves as your local system console. This server must have at least: 2 CPUs, 2 GB RAM, 20 GB Disk Linux or MacOS operating system (ubuntu is recommended) internet connectivity STINGAR is installed on this 'admin server'; the installation process will prompt you for the domain name/ip address. 2. Server to Host Honeypot(s) One or more servers must be available to host your honeypots. You may deploy honeypots to any number of servers. Each one should have at least: 1 CPU, 512 MB RAM, 8 GB Disk internet connectivity an alternate ssh port (for Cowrie deployments) STINGAR Administrator You need a user account with root access on each STINGAR server. The name can be any valid linux/MacOS username. You must be logged in as this user when you install STINGAR. The person who installs STINGAR must have basic understanding of Docker and system administration. For comprehensive information about Docker, you may refer to Docker & docker-compose documentation.","title":"Confirm Hardware Requirements"},{"location":"requirements/membership.html","text":"Minimum Requirements STINGAR Membership STINGAR is available only to members of the STINGAR community. Request membership by contacting the STINGAR team: team-stingar@duke.edu . When you become a member, you will be given a STINGAR Docker registry account. You will need to provide the username/password of this account when you install STINGAR.","title":"Join STINGAR Community"},{"location":"requirements/setup_centos.html","text":"STINGAR System - RHEL/Centos Installation This page describes how to install software that STINGAR needs to run on a RHEL/Centos server. Install Docker & Python Log onto the Centos server as the STINGAR administrative user (has root privs); then install & launch the software required to setup & run STINGAR. sudo yum update sudo yum install docker docker-compose gcc python3 pass -y sudo systemctl enable docker --now sudo systemctl start docker Setup Docker Group A system group named 'dockerroot' must include the STINGAR admin user (ie. the user you're currently logged in as). Create a group named 'dockerroot' and add the current user. sudo groupadd dockerroot sudo usermod -aG dockerroot ${USER} Note: Use the actual string: ${USER}. This automatically converts to the name of the user who runs the command. IMPORTANT: Before proceeding, you must logout & back in. button { color: #ffffff; background-color: #2f75bc; padding: .5em .8em; border-radius: 3px; border: none; } button:hover { background-color: #757475; } a { color: white; } a:visited, a:hover { color: white; } Proceed to Next Step","title":"Setup centos"},{"location":"requirements/setup_centos.html#stingar-system-rhelcentos-installation","text":"This page describes how to install software that STINGAR needs to run on a RHEL/Centos server.","title":"STINGAR System - RHEL/Centos Installation"},{"location":"requirements/setup_centos.html#install-docker-python","text":"Log onto the Centos server as the STINGAR administrative user (has root privs); then install & launch the software required to setup & run STINGAR. sudo yum update sudo yum install docker docker-compose gcc python3 pass -y sudo systemctl enable docker --now sudo systemctl start docker","title":"Install Docker &amp; Python"},{"location":"requirements/setup_centos.html#setup-docker-group","text":"A system group named 'dockerroot' must include the STINGAR admin user (ie. the user you're currently logged in as). Create a group named 'dockerroot' and add the current user. sudo groupadd dockerroot sudo usermod -aG dockerroot ${USER} Note: Use the actual string: ${USER}. This automatically converts to the name of the user who runs the command. IMPORTANT: Before proceeding, you must logout & back in. button { color: #ffffff; background-color: #2f75bc; padding: .5em .8em; border-radius: 3px; border: none; } button:hover { background-color: #757475; } a { color: white; } a:visited, a:hover { color: white; } Proceed to Next Step","title":"Setup Docker Group"},{"location":"requirements/setup_macos.html","text":"STINGAR System - MacOS Installation This page describes how to install software that STINGAR needs to run on a MacOS server. The server must be at MacOS Mojave 10.14.6 or higher and you must login as a user with root privilege. Because Docker is a system-level package, you cannot install it using brew install. You must use cask instead. Install Docker & Python Log onto the MacOS server as the STINGAR user (with root privs); then install & launch the software required to setup & run STINGAR. brew update brew cask install docker docker-compose python3 pass Launch Docker by entering [Cmd][Space] and typing the word 'Docker' in the prompt. Click [OK] and enter the root password to proceed. When Docker starts installing, a whale icon will appear in the top bar on the right. Click it to see the current status of Docker. When you see 'Docker Desktop is running\" you're ready to move forward! button { color: #ffffff; background-color: #2f75bc; padding: .5em .8em; border-radius: 3px; border: none; } button:hover { background-color: #757475; } a { color: white; } a:visited, a:hover { color: white; } Proceed to Next Step","title":"Setup macos"},{"location":"requirements/setup_macos.html#stingar-system-macos-installation","text":"This page describes how to install software that STINGAR needs to run on a MacOS server. The server must be at MacOS Mojave 10.14.6 or higher and you must login as a user with root privilege. Because Docker is a system-level package, you cannot install it using brew install. You must use cask instead.","title":"STINGAR System - MacOS Installation"},{"location":"requirements/setup_macos.html#install-docker-python","text":"Log onto the MacOS server as the STINGAR user (with root privs); then install & launch the software required to setup & run STINGAR. brew update brew cask install docker docker-compose python3 pass Launch Docker by entering [Cmd][Space] and typing the word 'Docker' in the prompt. Click [OK] and enter the root password to proceed. When Docker starts installing, a whale icon will appear in the top bar on the right. Click it to see the current status of Docker. When you see 'Docker Desktop is running\" you're ready to move forward! button { color: #ffffff; background-color: #2f75bc; padding: .5em .8em; border-radius: 3px; border: none; } button:hover { background-color: #757475; } a { color: white; } a:visited, a:hover { color: white; } Proceed to Next Step","title":"Install Docker &amp; Python"},{"location":"requirements/setup_ubuntu.html","text":"STINGAR System - Ubuntu Installation This page describes how to install software that STINGAR needs to run on an Ubuntu server. If possible, upgrade to Ubuntu 20.04 or higher. (We tested STINGAR installations on earlier Ubuntu versions and ran into a number of issues related to software dependencies with incompatible versions.) Install Docker & Python Log onto the Ubuntu server as the STINGAR admin user (has root privs), then install and launch the software you need to setup and run run STINGAR. Once logged in, enter the following commands: sudo apt update sudo apt upgrade -y sudo apt install docker docker-compose python3 gcc pass -y sudo systemctl enable docker --now sudo systemctl start docker Setup Docker Group A system group named 'docker' must include the STINGAR user (ie. the user you're currently logged in as). Run the following commands to create a group named 'docker' & add yourself (the current user). sudo groupadd docker sudo usermod -aG docker ${USER} sudo chown ${USER} /var/run/docker.sock Note: Use the actual string: ${USER}. This automatically converts to the name of the user who ran the command. IMPORTANT: Before proceeding, you must logout & back in. button { color: #ffffff; background-color: #2f75bc; padding: .5em .8em; border-radius: 3px; border: none; } button:hover { background-color: #757475; } a { color: white; } a:visited, a:hover { color: white; } Proceed to Next Step","title":"Setup ubuntu"},{"location":"requirements/setup_ubuntu.html#stingar-system-ubuntu-installation","text":"This page describes how to install software that STINGAR needs to run on an Ubuntu server. If possible, upgrade to Ubuntu 20.04 or higher. (We tested STINGAR installations on earlier Ubuntu versions and ran into a number of issues related to software dependencies with incompatible versions.)","title":"STINGAR System - Ubuntu Installation"},{"location":"requirements/setup_ubuntu.html#install-docker-python","text":"Log onto the Ubuntu server as the STINGAR admin user (has root privs), then install and launch the software you need to setup and run run STINGAR. Once logged in, enter the following commands: sudo apt update sudo apt upgrade -y sudo apt install docker docker-compose python3 gcc pass -y sudo systemctl enable docker --now sudo systemctl start docker","title":"Install Docker &amp; Python"},{"location":"requirements/setup_ubuntu.html#setup-docker-group","text":"A system group named 'docker' must include the STINGAR user (ie. the user you're currently logged in as). Run the following commands to create a group named 'docker' & add yourself (the current user). sudo groupadd docker sudo usermod -aG docker ${USER} sudo chown ${USER} /var/run/docker.sock Note: Use the actual string: ${USER}. This automatically converts to the name of the user who ran the command. IMPORTANT: Before proceeding, you must logout & back in. button { color: #ffffff; background-color: #2f75bc; padding: .5em .8em; border-radius: 3px; border: none; } button:hover { background-color: #757475; } a { color: white; } a:visited, a:hover { color: white; } Proceed to Next Step","title":"Setup Docker Group"},{"location":"requirements/software.html","text":"Minimum Requirements Software Install Docker & Python You will need root access to the server that will host your STINGAR application. Once logged onto the server as the user with root access, download the software packages that STINGAR will need: docker, docker-compose & python3. The commands to download/install these depend upon your operating system. The three operating systems that can be used to host STINGAR are Ubuntu (preferred), RHEL/Centos and MacOS. Click below on the button for the operating system of your STINGAR server for instructions to install on that platform. button { color: #ffffff; background-color: #2f75bc; padding: .5em .8em; border-radius: 3px; border: none; } button:hover { background-color: #757475; } a { color: white; } a:visited, a:hover { color: white; } Click here if installing on Ubuntu (preferred) Click here if installing on RHEL/Centos Click here if installing on a Mac","title":"Install Required Software"}]}